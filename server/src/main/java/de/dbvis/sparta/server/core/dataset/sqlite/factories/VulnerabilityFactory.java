package de.dbvis.sparta.server.core.dataset.sqlite.factories;

import de.dbvis.sparta.server.core.dataset.ModuleListFlattener;
import de.dbvis.sparta.server.core.dataset.sqlite.SqliteDataset;
import de.dbvis.sparta.server.rest.model.basic.Bug;
import de.dbvis.sparta.server.rest.model.basic.Module;
import de.dbvis.sparta.server.rest.model.basic.Vulnerability;

import javax.sql.rowset.CachedRowSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

public class VulnerabilityFactory {

    private static final Logger log = Logger.getLogger(VulnerabilityFactory.class.getName());

    private List<Bug> bugs;
    private List<Module> flatModuleList;

    public VulnerabilityFactory() {
        this.bugs = SqliteDataset.getInstance().getBugs();
        this.flatModuleList = new ModuleListFlattener(SqliteDataset.getInstance().getPlainModules()).flatten();
    }

    public List<Vulnerability> createVulnerabilitiesFromCachedResult(CachedRowSet cachedRowSet) {
        List<Vulnerability> result = new ArrayList<Vulnerability>(cachedRowSet.size());
        try {
            while (cachedRowSet.next()) {
                final int bugId = cachedRowSet.getInt(2);
                final Optional<Bug> optionalBug = bugs.stream().filter(e -> e.getId() == bugId).findAny();
                if (!optionalBug.isPresent()) {
                    log.severe("Could not find bug with id " + bugId + ".");
                    continue;
                }
                final int parentModuleId = cachedRowSet.getInt(3);
                final Optional<Module> optionalModule = flatModuleList.stream().filter(e -> e.getId() == parentModuleId).findAny();
                if (!optionalModule.isPresent()) {
                    log.severe("Could not find parent module with id " + parentModuleId + ".");
                    continue;
                }
                Vulnerability vulnerability = new Vulnerability(
                        cachedRowSet.getInt(1),
                        optionalBug.get(),
                        optionalModule.get());
                result.add(vulnerability);
            }
        } catch (SQLException e) {
            log.severe("Could not create vulnerabilities from cached result!");
        }
        return result;
    }


}
